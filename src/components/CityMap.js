import React, { useState, useEffect } from 'react';
import './CityMap.css';
import BuildingCard from './BuildingCard';
import BudgetPanel from './BudgetPanel';
import SatisfactionIndicator from './SatisfactionIndicator';

const CityMap = ({ buildings = [], onUpgrade, cityResources }) => {
  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±—É–¥—ñ–≤–µ–ª—å
  const safeBuildings = Array.isArray(buildings) ? buildings : [];

  const calculateTotalSatisfaction = () => {
    if (safeBuildings.length === 0) return 50; // –ë–∞–∑–æ–≤–∞ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å
    let totalSatisfaction = 50;
    safeBuildings.forEach(building => {
      totalSatisfaction += building.satisfaction || 0;
    });
    return Math.min(Math.max(totalSatisfaction, 0), 100);
  };

  const [sortBy, setSortBy] = useState('date');
  const [filterCategory, setFilterCategory] = useState('all');
  const [satisfaction, setSatisfaction] = useState(() => calculateTotalSatisfaction());

  // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å –ø—Ä–∏ –∑–º—ñ–Ω—ñ –±—É–¥—ñ–≤–µ–ª—å
  useEffect(() => {
    const newSatisfaction = calculateTotalSatisfaction();
    setSatisfaction(newSatisfaction);
  }, [buildings]);

  const categories = [
    { id: 'all', name: '–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó' },
    { id: 'residential', name: '–ñ–∏—Ç–ª–æ–≤—ñ' },
    { id: 'commercial', name: '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω—ñ' },
    { id: 'social', name: '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ' },
    { id: 'infrastructure', name: '–Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞' }
  ];

  const getBuildingCategory = (building) => {
    if (building.name.includes('–ñ–∏—Ç–ª–æ–≤–∏–π')) return 'residential';
    if (building.name.includes('–û—Ñ—ñ—Å–Ω–∏–π') || building.name.includes('–Ü–Ω–¥—É—Å—Ç—Ä—ñ–∞–ª—å–Ω–∞')) return 'commercial';
    if (building.name.includes('–õ—ñ–∫–∞—Ä–Ω—è') || building.name.includes('–®–∫–æ–ª–∞')) return 'social';
    return 'infrastructure';
  };

  const getSortedAndFilteredBuildings = () => {
    let filteredBuildings = [...safeBuildings];
    
    if (filterCategory !== 'all') {
      filteredBuildings = safeBuildings.filter(b => getBuildingCategory(b) === filterCategory);
    }

    switch (sortBy) {
      case 'name':
        return filteredBuildings.sort((a, b) => a.name.localeCompare(b.name));
      case 'level':
        return filteredBuildings.sort((a, b) => b.level - a.level);
      case 'cost':
        return filteredBuildings.sort((a, b) => b.cost - a.cost);
      default: // 'date'
        return filteredBuildings.sort((a, b) => 
          new Date(b.constructionDate) - new Date(a.constructionDate)
        );
    }
  };

  const getCityStats = () => {
    const stats = {
      totalBuildings: safeBuildings.length,
      totalValue: safeBuildings.reduce((sum, b) => sum + b.cost, 0),
      averageLevel: safeBuildings.length ? safeBuildings.reduce((sum, b) => sum + b.level, 0) / safeBuildings.length : 0,
      maxLevelBuildings: safeBuildings.filter(b => b.level === 2).length
    };
    return stats;
  };

  const formatNumber = (num) => {
    return new Intl.NumberFormat('uk-UA').format(num);
  };

  const cityStats = getCityStats();

  if (safeBuildings.length === 0) {
    return (
      <div className="city-map">
        <div className="empty-city">
          <h2>–í–∞—à–µ –º—ñ—Å—Ç–æ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—î</h2>
          <p>
            –ü–æ—á–Ω—ñ—Ç—å –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ –Ω–æ–≤–∏—Ö —Å–ø–æ—Ä—É–¥ —É —Ä–æ–∑–¥—ñ–ª—ñ "–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ" üèóÔ∏è
            –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ—î —É–Ω—ñ–∫–∞–ª—å–Ω–µ –º—ñ—Å—Ç–æ —Ç–∞ —Ä–æ–∑–≤–∏–≤–∞–π—Ç–µ –π–æ–≥–æ!
          </p>
          <div style={{ fontSize: '3em', marginTop: '20px' }}>
            üè¢ üè• üè´ üè≠
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="city-map">
      <BudgetPanel 
        budget={cityResources.budget}
        materials={cityResources.materials}
        workers={cityResources.workers}
      />

      <div className="city-header">
        <div className="controls-section">
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
            className="control-select"
          >
            <option value="date">–ó–∞ –¥–∞—Ç–æ—é</option>
            <option value="name">–ó–∞ –Ω–∞–∑–≤–æ—é</option>
            <option value="level">–ó–∞ —Ä—ñ–≤–Ω–µ–º</option>
            <option value="cost">–ó–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—é</option>
          </select>

          <select
            value={filterCategory}
            onChange={(e) => setFilterCategory(e.target.value)}
            className="control-select"
          >
            {categories.map(category => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
        </div>

        <SatisfactionIndicator satisfaction={satisfaction} />
      </div>

      <div className="grid-container">
        {getSortedAndFilteredBuildings().map((building) => (
          <BuildingCard
            key={building.id}
            building={building}
            onUpgrade={onUpgrade}
            resources={cityResources}
          />
        ))}
      </div>
    </div>
  );
};

export default CityMap; 